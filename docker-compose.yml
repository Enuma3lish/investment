services:
  db:
    image: postgres:15
    container_name: db
    environment:
      POSTGRES_DB: ${POSTGRES_NAME}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - pgdata:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_PORT}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7
    container_name: redis
    ports:
      - "6379:6379"

  mcp:
    build:
      context: ./mcp_server
      dockerfile: Dockerfile
    container_name: mcp
    ports:
      - "5001:8001"  # Map external 5001 to internal 8001
    environment:
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - CLAUDE_API_KEY=${CLAUDE_API_KEY}
    restart: unless-stopped

  backend:
    build:
      context: .
      dockerfile: Dockerfile
    image: pretest_backend
    container_name: backend
    env_file:
      - .env
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
      mcp:
        condition: service_started
    healthcheck:
      test: ["CMD", "python", "manage.py", "check", "--database", "default"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  celery:
    build:
      context: .
      dockerfile: Dockerfile
    image: pretest_backend
    container_name: celery
    entrypoint: ["sh"]
    command: ["-c", "until pg_isready -h db -p 5432; do sleep 2; done && celery -A pretest.celery worker --loglevel=info"]
    env_file:
      - .env
    depends_on:
      backend:
        condition: service_healthy  # Wait for backend to be healthy (migrations complete)
      redis:
        condition: service_started
      db:
        condition: service_healthy

  celery_beat:
    build:
      context: .
      dockerfile: Dockerfile
    image: pretest_backend
    container_name: celery_beat
    entrypoint: ["sh"]
    command: ["-c", "until pg_isready -h db -p 5432; do sleep 2; done && sleep 10 && celery -A pretest.celery beat --loglevel=info"]
    env_file:
      - .env
    depends_on:
      backend:
        condition: service_healthy  # Wait for backend to be healthy (migrations complete)
      redis:
        condition: service_started
      db:
        condition: service_healthy

  # frontend:
  #   build:
  #     context: ./investment-chatbot
  #     dockerfile: Dockerfile
  #   image: investment_chatbot
  #   container_name: frontend
  #   ports:
  #     - "4200:80"
  #   volumes:
  #     - ./investment-chatbot/nginx.conf:/etc/nginx/conf.d/default.conf:ro
  #   depends_on:
  #     - backend

volumes:
  pgdata: